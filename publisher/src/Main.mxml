<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="org.apache.flex.asjs.components.*"
					   width="640"
					   height="480"
					   currentState="FalconJx"
					   creationComplete="creationCompleteHandler(event)">
	
	<fx:Script><![CDATA[
		
		import mx.controls.Alert;
		import mx.events.FlexEvent;
		
		import org.apache.flex.asjs.CommandScript;
		import org.apache.flex.asjs.Utils;
		import org.apache.flex.asjs.enums.BrowseTypes;
		import org.apache.flex.asjs.enums.ScriptNames;
		import org.apache.flex.asjs.events.CommandScriptEvent;
		

		
		//----------------------------------------------------------------------
		//
		//    Variables
		//
		//----------------------------------------------------------------------
		
		private var _commandScript:CommandScript;
		
		
			
		//----------------------------------------------------------------------
		//
		//    Event handlers
		//
		//----------------------------------------------------------------------
		
		//----------------------------------
		//    creationCompleteHandler
		//----------------------------------
		
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			var command:String;
			
			falconJxPath.path = Utils.readPath("falconJx");
			projectPath.path = Utils.readPath("project");
			
			_commandScript = new CommandScript();
			_commandScript.addEventListener(CommandScriptEvent.DONE, commandScriptDoneHandler);
			
			command = "";
			command += "cd \"{0}\"\n";
			command += "/usr/share/java/apache-ant-1.7.1/bin/ant";
			_commandScript.scripts[ScriptNames.ANT_BUILD] = command;
			
			command = "";
			command += "\"{0}/bin/mxmlc\" -output=\"{1}\" \"{2}\"";
			_commandScript.scripts[ScriptNames.COMPILE_TO_INTERMEDIATE_JS] = command;
			
			command = "";
			command += "cp -rf \"{0}\" \"{1}\"";
			_commandScript.scripts[ScriptNames.COPY_DIR] = command;
			
			command = "";
			command += "cp \"{0}\" \"{1}\"";
			_commandScript.scripts[ScriptNames.COPY_FILE] = command;
			
			command = "";
			command += "\"{0}\" {1}";
			_commandScript.scripts[ScriptNames.FIND_DEPENDENCIES] = command;
			
			command = "";
			command += "svn checkout {0} \"{1}\"";
			_commandScript.scripts[ScriptNames.GET_SVN] = command;
			
			command = "";
			command += "open \"{0}\"";
			_commandScript.scripts[ScriptNames.OPEN_BROWSER] = command;
			
			//btnCompileProjectToJS.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
		}
		
		//----------------------------------
		//    btnCompileProjectToJS_clickHandler
		//----------------------------------
		
		protected function btnCompileProjectToJS_clickHandler(event:MouseEvent):void
		{
			enabled = false;
			
			var fileSep:String = (Capabilities.os.indexOf("Windows") != -1) ? "\\" : "/";
			
			var pathArray:Array = projectPath.path.split(fileSep);
			var sourceFileStr:String = String(pathArray.pop()); // remove and return file name
			pathArray.pop(); // remove 'src' dir
			
			var sourceDirStr:String = pathArray.join(fileSep);
			
			var intermediateDirStr:String = sourceDirStr + fileSep + "js-intermediate" + fileSep;
			var releaseDirStr:String = sourceDirStr + fileSep + "js-release" + fileSep;
			var intermediateDir:File = new File(intermediateDirStr);
			var releaseDir:File = new File(releaseDirStr);
			if (!intermediateDir.exists)
			{
				intermediateDir.createDirectory();
				releaseDir.createDirectory();
			}
			var outputFileStr:String = sourceFileStr.replace(".as", "");
			
			var libDir:File = File.applicationStorageDirectory.resolvePath("lib");
			if (!libDir.exists)
				libDir.createDirectory();

			var closureSubDir:File = libDir.resolvePath("Google_Closure");
			var closureSubDirStr:String = closureSubDir.nativePath + fileSep;
			var compilerSubDirStr:String = closureSubDir.resolvePath("compiler").nativePath + fileSep;
			var googSubDir:File = closureSubDir.resolvePath("closure/goog");
			var builderSubDir:File = closureSubDir.resolvePath("closure/bin/build");
			if (!googSubDir.exists)
			{
				_commandScript.chain.push([ScriptNames.GET_SVN, [
					"http://closure-library.googlecode.com/svn/trunk/",
					closureSubDir.nativePath]]);
				
				/*_commandScript.chain.push([ScriptNames.GET_SVN, [
					"http://closure-compiler.googlecode.com/svn/trunk/",
					compilerSubDirStr]]);
				
				_commandScript.chain.push([ScriptNames.ANT_BUILD, [
					compilerSubDirStr]]);*/
			}
			
			var vanillaSDKSubDir:File = libDir.resolvePath("VanillaSDK");
			if (!vanillaSDKSubDir.resolvePath("flash/events/MouseEvent.js").exists)
			{
				_commandScript.chain.push([ScriptNames.GET_SVN, [
					"https://svn.apache.org/repos/asf/flex/asjs/branches/develop/frameworks/js/VanillaSDK",
					vanillaSDKSubDir.nativePath]]);
			}			

			var tmpDir:File = File.applicationStorageDirectory.resolvePath("tmp");
			if (tmpDir.exists)
				tmpDir.deleteDirectory(true);	
			tmpDir.createDirectory();
			var tmpDirStr:String = tmpDir.nativePath + fileSep;
			
			//*
			_commandScript.chain.push([ScriptNames.COMPILE_TO_INTERMEDIATE_JS, [
				falconJxPath.path,
				tmpDirStr + outputFileStr + ".js",
				projectPath.path]]);
			
			// copy HTML template to tmp
			_commandScript.chain.push([ScriptNames.COPY_FILE, [
				File.applicationDirectory.nativePath + fileSep + ".." + fileSep + "index.html.template",
				tmpDirStr + "index.html"]]);
			
			// copy 'VanillaSDK' to tmp
			_commandScript.chain.push([ScriptNames.COPY_DIR, [
				vanillaSDKSubDir.nativePath + "",
				tmpDirStr + "_VanillaSDK" + fileSep]]);
			
			// resolve JS dependencies for project
			var params:String = "";
			params += " --root=\"" + tmpDirStr + "\"";
			params += " --output_file=\"" + tmpDirStr + outputFileStr + "_deps.js\"";
			_commandScript.chain.push([ScriptNames.FIND_DEPENDENCIES, [
				builderSubDir.nativePath + fileSep + "depswriter.py",
				params]]);
			
			// copy 'goog' to tmp
			_commandScript.chain.push([ScriptNames.COPY_DIR, [
				googSubDir.nativePath + fileSep,
				tmpDirStr]]);
			
			// copy result to 'js-intermediate'
			_commandScript.chain.push([ScriptNames.COPY_DIR, [
				tmpDirStr + "/",
				intermediateDir.nativePath]]);
			//*/
			
			// copy output file to 'js-release'
			/*_commandScript.chain.push([ScriptNames.COPY_FILE, [
				tmpDirStr + outputFileStr + ".js",
				releaseDirStr + outputFileStr + ".js"]]);*/
			
			// build with Closure Compiler to 'js-release'
			/*var params:String = "";
			//params = "";
			params += " --compiler_jar=\"" + compilerSubDirStr + "build/compiler.jar\""; // compiler.jar
			params += " --input=\"" + tmpDirStr + outputFileStr + ".js\"";
			params += " --root=\"" + tmpDirStr + "\"";
			params += " --root=\"" + closureSubDirStr + fileSep + "third_party\"";
			params += " --namespace=\"" + outputFileStr + "\"";
			params += " --output_mode=compiled";
			params += " --output_file=\"" + sourceDirStr + fileSep + "js-release" + fileSep + outputFileStr + ".js\""; // release file name
			params += " --compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS";
			params += " --compiler_flags=--warning_level=VERBOSE";
			//params += " --compiler_flags=--jscomp_error=checkTypes";
			_commandScript.chain.push([ScriptNames.FIND_DEPENDENCIES, [
				builderSubDir.nativePath + fileSep + "closurebuilder.py",
				params]]);*/

			// open HTML in browser
			_commandScript.chain.push([ScriptNames.OPEN_BROWSER, [
				"file://localhost" + intermediateDir.nativePath + "/index.html"]]);
			/*_commandScript.chain.push([ScriptNames.OPEN_BROWSER, [
				"file://localhost" + releaseDirStr + "/index.html"]]);*/
			
			_commandScript.exec();
		}
		
		//----------------------------------
		//    commandScriptDoneHandler
		//----------------------------------
		
		private function commandScriptDoneHandler(event:CommandScriptEvent):void
		{
			enabled = true;
			
			Alert.show("All done ;-)");
			
			//Main(FlexGlobals.topLevelApplication).exit();
		}
		
	]]></fx:Script>
	
	<fx:Declarations />
	
	<s:states>
		<s:State name="FalconJx" />
		<s:State name="settings" />
	</s:states>
	
	<s:Panel id="pnlProject" left="10" top="10" right="10" bottom="40"
			 width="100%" height="100%">
		<s:VGroup left="10" right="10" top="10" bottom="10"
				  gap="25">
			<components:PathSelectionBox id="falconJxPath" 
										 width="100%"
										 pathName="falconJx"
										 hint="e.g. /Users/you/Documents/FalconJx"
										 instruction="Enter the path to the FalconJx compiler:" />
			
			<components:PathSelectionBox id="projectPath" 
										 width="100%"
										 browseType="{BrowseTypes.BROWSE_FILE}"
										 pathName="project"
										 hint="e.g. /Users/you/Documents/myProject/project.as"
										 instruction="Enter the path to your PROJECT main AS - not MXML (yet) - file:" />
		</s:VGroup>
	</s:Panel>
	
	<s:HGroup bottom="10"
			  width="100%"
			  horizontalAlign="center">
		<s:Button id="btnCompileProjectToJS" label="Compile Project to JS"
				  bottom="10"
				  horizontalCenter="0"
				  click="btnCompileProjectToJS_clickHandler(event)" />
	</s:HGroup>
	
</s:WindowedApplication>
