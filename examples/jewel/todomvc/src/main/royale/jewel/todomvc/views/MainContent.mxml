<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<j:View xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns:html="library://ns.apache.org/royale/html"
    initComplete="setUp()">

    <fx:Script>
		<![CDATA[
        import jewel.todomvc.vos.TodoVO;

        import org.apache.royale.collections.ArrayList;
        import org.apache.royale.collections.ArrayListView;
        import org.apache.royale.events.Event;

        [Bindable]
        public var items:ArrayList = new ArrayList();

        public function setUp():void {
            list.addEventListener("itemStateChanged", itemStateChangedHandler);
        }

        private function addItem(event:Event):void {
            var newItem:TodoVO = new TodoVO(event.target.text);
            items.addItem(newItem);
            event.target.text = "";
            itemStateChangedHandler();
        }
        
        public function itemsCompleted(listOfItems:ArrayList, filterFunction:Function = null):ArrayListView {
            var alv:ArrayListView = new ArrayListView(listOfItems);
            alv.filterFunction = filterFunction;
            alv.refresh();
            return alv;
        }

        public function allItems(item:TodoVO):Boolean {
            return true;
        }

        public function isActive(item:TodoVO):Boolean {
            return item && item.done == false;
        }

        public function isCompleted(item:TodoVO):Boolean {
            return item && item.done == true;
        }
        
        //Mark all as complete
        public function markAllAsComplete():void {
            var len:int = items.length
            var item:TodoVO;
            for(var i:int = 0; i < len; i++)
            {
                item = TodoVO(items.getItemAt(i));
                item.done = true;
            }
        }

        public function removeCompleted():void {
            var l:uint = items.length;
            var item:TodoVO;
            while(l--) {
                item = TodoVO(items.getItemAt(l));
                if(item.done){
                    items.removeItem(item);
                }
            }
        }

        public function itemStateChangedHandler(event:Event = null):void {
            itemsLeft.text = itemsCompleted(items, isActive).length + " item left";
            clearCompleted.visible = itemsCompleted(items, isCompleted).length != 0 ? true : false;
        }
        ]]>
	</fx:Script>
 
    <j:beads>
        <js:ContainerDataBinding/>
    </j:beads>

    <j:SectionContent className="todoapp" isSelected="true">
        <html:H1 text="todos"/>

        <j:HGroup>
            <j:IconButton click="markAllAsComplete()">
                <j:icon>
                    <js:FontIcon text="{MaterialIconType.ARROW_DOWNWARD}" material="true"/>
                </j:icon>
            </j:IconButton>
            <j:TextInput localId="need" enter="addItem(event)" className="new-todo">
                <j:beads>
                    <j:TextPrompt prompt="What needs to be done?"/>
                </j:beads>
            </j:TextInput>
        </j:HGroup>

        <j:List localId="list" width="200" height="300" rowHeight="60"
            labelField="label" className="todoItemRenderer todo-list"
            initComplete="list.dataProvider = itemsCompleted(items, null)">
            <j:beads>
                <j:AddListItemRendererForArrayListData/>
                <j:RemoveListItemRendererForArrayListData/>
                <j:UpdateListItemRendererForArrayListData/>
            </j:beads>
        </j:List>

        <j:BarRow>
            <j:BarSection>
                <j:Label localId="itemsLeft" text="0 items left"/>
            </j:BarSection>
            <j:BarSection>
                <j:Button text="All" click="list.dataProvider = itemsCompleted(items, null)"/>
                <j:Button text="Active" click="list.dataProvider = itemsCompleted(items, isActive)"/>
                <j:Button text="Completed" click="list.dataProvider = itemsCompleted(items, isCompleted)"/>
            </j:BarSection>
            <j:BarSection>
                <j:Button localId="clearCompleted" text="Clear Completed" click="removeCompleted()" visible="false"/>
            </j:BarSection>
        </j:BarRow>
    
    </j:SectionContent>
</j:View>