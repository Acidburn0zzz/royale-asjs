<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<j:View xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns:html="library://ns.apache.org/royale/html"
    xmlns:local="*"
    initComplete="setUp()">

    <fx:Script>
		<![CDATA[
        import jewel.todomvc.vos.TodoVO;

        import org.apache.royale.collections.ArrayList;
        import org.apache.royale.collections.ArrayListView;
        import org.apache.royale.events.Event;

        public function setUp():void
        {
            list.addEventListener("itemStateChanged", itemStateChangedHandler)
        }

        private function addItem(event:Event):void
        {
            var newItem:TodoVO = new TodoVO(event.target.text);
            items.addItem(newItem);
            event.target.text = "";
            itemStateChangedHandler();
        }

        [Bindable]
        public var items:ArrayList = new ArrayList();
        
        public function itemsCompleted(listOfItems:ArrayList, filterFunction:Function = null):ArrayListView
        {
            var alv:ArrayListView = new ArrayListView(listOfItems);
            alv.filterFunction = filterFunction;
            alv.refresh();
            return alv;
        }

        public function allItems(item:TodoVO):Boolean {
            return true;
        }

        public function isActive(item:TodoVO):Boolean {
            return item && item.done == false;
        }

        public function isCompleted(item:TodoVO):Boolean {
            return item && item.done == true;
        }
        
        public function markAllDone():void {
            var l:uint = items.length;
            var item:TodoVO;
            while(l--) {
                item = TodoVO(items.getItemAt(l));
                item.done = true;
            }
        }

        public function removeCompleted():void {
            var l:uint = items.length;
            var item:TodoVO;
            while(l--) {
                item = TodoVO(items.getItemAt(l));
                if(item.done){
                    items.removeItemAt(l);
                }
            }
        }

        public function itemStateChangedHandler(event:Event = null):void
        {
            itemsLeft.text = itemsCompleted(items, isActive).length + " item left";
        }
        ]]>
	</fx:Script>
 
    <j:beads>
        <js:ContainerDataBinding/>
    </j:beads>

    <html:H1 text="todos"/>
            
    <j:Card>

        <j:HGroup>
            <j:IconButton click="markAllDone()">
                <j:icon>
                    <js:FontIcon text="{MaterialIconType.ARROW_DOWNWARD}" material="true"/>
                </j:icon>
            </j:IconButton>
            <j:TextInput localId="need" enter="addItem(event)">
                <j:beads>
                    <j:TextPrompt prompt="What needs to be done?"/>
                </j:beads>
            </j:TextInput>
        </j:HGroup>

        <j:List localId="list" width="200" height="300" rowHeight="60"
            labelField="label" className="todoItemRenderer"
            initComplete="list.dataProvider = itemsCompleted(items, null)">
            <j:beads>
                <j:AddListItemRendererForArrayListData/>
                <j:RemoveListItemRendererForArrayListData/>
                <j:UpdateListItemRendererForArrayListData/>
                <j:RemoveAllItemRendererForArrayListData/>
            </j:beads>
        </j:List>
        <j:HGroup gap="3">
            <j:Label localId="itemsLeft" text="0 items left"/>
            <j:Button text="All" click="list.dataProvider = itemsCompleted(items, null)"/>
            <j:Button text="Active" click="list.dataProvider = itemsCompleted(items, isActive)"/>
            <j:Button text="Completed" click="list.dataProvider = itemsCompleted(items, isCompleted)"/>
            <j:Button text="Clear Completed" click="removeCompleted()"/>
        </j:HGroup>
    </j:Card>

</j:View>