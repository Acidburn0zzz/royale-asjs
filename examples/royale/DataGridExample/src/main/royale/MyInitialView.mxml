<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<js:View xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:js="library://ns.apache.org/royale/basic">
    <fx:Script>
        <![CDATA[
			import models.ProductsModel;
			
			import org.apache.royale.html.DataGrid;
			
			import products.Product;
			
		 private function dataGridChange(grid:DataGrid, output:Label) : void
		 {
			 output.text = "Clicked on row "+grid.selectedIndex;
		 }
			
		private function refreshGrid():void
		{
			dataGrid.dataProvider = null;
			dataGrid.dataProvider = (applicationModel as ProductsModel).productList;
		}
			
		private function addValue():void
		{
			var product:Product = new Product("xx100","New Item",44,10,"assets/smallbluerect.jpg");
			(applicationModel as ProductsModel).productList.addItemAt(product, 2);
		}
			
		private function removeValue():void
		{
			(applicationModel as ProductsModel).productList.removeItemAt(2);
		}
		]]>
    </fx:Script>
	
	<fx:Style>
		@namespace js "library://ns.apache.org/royale/basic";
		
		/* These border lines currently show only on HTML */
		.opt_org-apache.royale-html-DataGrid_ListArea .middle {
			border-left: solid 1px #333333;
			border-right: solid 1px #333333;
		}
		
		.DataGridStyle
		{
			IBeadView: ClassReference("org.apache.royale.html.beads.DataGridPercentageView");	
		}
		
		.DynamicGrid {
			IBeadModel: ClassReference("org.apache.royale.html.beads.models.DataGridModel");
		}
		
		.DynamicGridColumn {
			IDataProviderItemRendererMapper: ClassReference("org.apache.royale.html.beads.DataItemRendererFactoryForCollectionView");
		}

	</fx:Style>
	
	<js:Label x="20" y="10" text="Both DataGrids share the same dataProvider. The second DataGrid is dynamic." />
	
	<!-- controls for first grid -->
	<js:Label id="output1" x="30" y="430"/>
	<js:TextButton text="Refresh Grid" x="20" y="460" click="refreshGrid()" />
	<js:Label text="Refresh this grid after add or removing values" x="30" y="490" />
	
	<!-- controls for second grid -->
	<js:Label id="output2" x="520" y="430" />
	<js:TextButton x="520" y="460" text="Add Value" click="addValue()" />
	<js:TextButton x="520" y="490" text="Remove Value" click="removeValue()" />
	
		
	<js:DataGrid id="dataGrid" x="20" y="50" width="400" height="350" change="dataGridChange(dataGrid, output1)" 
				 rowHeight="40" className="DataGridStyle">
		<js:beads>
			<js:ConstantBinding
				sourceID="applicationModel"
				sourcePropertyName="productList"
				destinationPropertyName="dataProvider" />
		</js:beads>
		<js:columns>
			<js:DataGridColumn label="Image" dataField="image" columnWidth="15" itemRenderer="products.ProductItemRenderer" />
			<js:DataGridColumn label="Title" dataField="title" columnWidth="60" />
			<js:DataGridColumn label="Sales" dataField="sales" columnWidth="25" />
		</js:columns>
	</js:DataGrid>
		
	<js:DataGrid id="dataGrid2" x="520" y="50" width="400" height="350" change="dataGridChange(dataGrid2, output2)" rowHeight="40" className="DynamicGrid">
		<js:beads>
			<js:ConstantBinding
				sourceID="applicationModel"
				sourcePropertyName="productList"
				destinationPropertyName="dataProvider" />
		</js:beads>
		<js:columns>
			<js:DataGridColumn label="Image" dataField="image" columnWidth="100" itemRenderer="products.ProductItemRenderer" 
							   className="DynamicGridColumn" />
			<js:DataGridColumn label="Title" dataField="title" columnWidth="200" className="DynamicGridColumn" />
			<js:DataGridColumn label="Sales" dataField="sales" columnWidth="100" className="DynamicGridColumn" />
		</js:columns>
	</js:DataGrid>
	
	
	<!--
	  This bead is not working yet. It can be added to either DataGrid when it works.
		<js:DataGridLinesBead>
			<js:stroke>
				<js:SolidColorStroke color="#FF8800" weight="2" />
			</js:stroke>
		</js:DataGridLinesBead>-->

</js:View>
