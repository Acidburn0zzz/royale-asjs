<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<basic:View xmlns:fx="http://ns.adobe.com/mxml/2009"
			title="Watch List"
			xmlns:basic="library://ns.apache.org/flexjs/basic"
			xmlns:controller="controller.*"
			xmlns:local="*"
			className="WatchListView"
			xmlns:renderers="renderers.*">
	
	<fx:Script>
		<![CDATA[						
			import controller.WatchListController;
			
			import models.ProductsModel;
			import models.Stock;
			
			import org.apache.flex.binding.SimpleBinding;
			import org.apache.flex.core.IBeadController;
			import org.apache.flex.core.IBeadModel;
			import org.apache.flex.events.Event;
			import org.apache.flex.mobile.IViewManager;
			import org.apache.flex.mobile.StackedViewManager;
						
			public function set dataModel(value:IBeadModel):void
			{
				(controller as WatchListController).model = value;
			}
			public function get dataModel():IBeadModel
			{
				return (controller as WatchListController).model;
			}
			
			private function onSelectStock():void
			{
				var stockView:StockView = new StockView();
				var svm:IViewManager = viewManager;
				(viewManager as StackedViewManager).push(stockView);
			}
			
			private function addSymbol():void
			{
				dispatchEvent(new org.apache.flex.events.Event("addSymbol"));
			}
			
			public var selectedStockIndex:Number;
			
			private function selectRow():void
			{
				selectedStockIndex = dataGrid.selectedIndex;
				dispatchEvent(new org.apache.flex.events.Event("stockSelected"));
			}
			
			public function showStockDetails(stock:Stock):StockView
			{
				var stockView:StockView = new StockView();
				stockView.stock = stock;
				(viewManager as StackedViewManager).push(stockView);
				
				return stockView;
			}
			
			public function popView():void
			{
				(viewManager as StackedViewManager).pop();
			}
		]]>
	</fx:Script>
	
	<basic:beads>
		<basic:NonVirtualVerticalLayout />
	</basic:beads>
	
	<basic:Container className="WatchListInputArea">
		<basic:beads>
			<basic:NonVirtualHorizontalLayout />
		</basic:beads>
		<basic:Label text="Symbol:" />
		<basic:TextInput id="symbolName" />
		<basic:TextButton text="Add" click="addSymbol()" />
	</basic:Container>
	
	<basic:Container x="0" y="0" className="WatchListInner">
		<basic:beads>
			<basic:ScrollingContainerView />
			<basic:NonVirtualVerticalScrollingLayout />
		</basic:beads>
		
		<basic:DataGrid id="dataGrid" change="selectRow()" width="480" height="480" className="WatchListDataGrid">
			<basic:beads>
				<basic:SimpleBinding
					eventName="update"
					sourceID="dataModel"
					sourcePropertyName="watchList"
					destinationPropertyName="dataProvider" />
			</basic:beads>
			<basic:columns>
				<basic:DataGridColumn label="Symbol" dataField="symbol">
					<basic:itemRenderer>
						<fx:Component>
							<basic:StringItemRenderer />
						</fx:Component>
					</basic:itemRenderer>
				</basic:DataGridColumn>
				<basic:DataGridColumn label="Open" dataField="open">
					<basic:itemRenderer>
						<fx:Component>
							<renderers:StockRenderer />
						</fx:Component>
					</basic:itemRenderer>
				</basic:DataGridColumn>
				<basic:DataGridColumn label="Last" dataField="last" >
					<basic:itemRenderer>
						<fx:Component>
							<renderers:StockRenderer />
						</fx:Component>
					</basic:itemRenderer>
				</basic:DataGridColumn>
				<basic:DataGridColumn label="High" dataField="high" >
					<basic:itemRenderer>
						<fx:Component>
							<renderers:StockRenderer />
						</fx:Component>
					</basic:itemRenderer>
				</basic:DataGridColumn>
				<basic:DataGridColumn label="Low" dataField="low" >
					<basic:itemRenderer>
						<fx:Component>
							<renderers:StockRenderer />
						</fx:Component>
					</basic:itemRenderer>
				</basic:DataGridColumn>
			</basic:columns>
		</basic:DataGrid>
	</basic:Container>

</basic:View>