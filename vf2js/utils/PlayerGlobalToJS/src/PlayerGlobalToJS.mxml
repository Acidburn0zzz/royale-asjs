<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="creationCompleteHandler(event)">
	
	<fx:Script><![CDATA[
		
		import flash.utils.Dictionary;
		import flash.utils.getQualifiedClassName;
		
		import mx.events.FlexEvent;
		import mx.utils.StringUtil;
		
		import nl.ixms.Utils;
		import nl.ixms.enums.MemberType;
		import nl.ixms.vo.Clazz;
		import nl.ixms.vo.JSDoc;
		
		import org.as3commons.reflect.Accessor;
		import org.as3commons.reflect.Constant;
		import org.as3commons.reflect.Method;
		import org.as3commons.reflect.Parameter;
		import org.as3commons.reflect.Type;
		import org.as3commons.reflect.Variable;
		
		include './shadowInterfaces.as';
		
		
		
		//----------------------------------------------------------------------
		//
		//  Constants 
		//
		//----------------------------------------------------------------------
		
		private const ACTION_UNIMPLEMENTED:String = 
			'console.log(\'VF2JS Error: call to unimplemented class member ({0})\');';
		
		
		
		//----------------------------------------------------------------------
		//
		//  Properties 
		//
		//----------------------------------------------------------------------
		
		//--------------------------------------
		//  catalogXML_ 
		//--------------------------------------
		
		private var catalogXML_:XMLList;
		
		//--------------------------------------
		//  classes_ 
		//--------------------------------------
		
		private var classes_:Dictionary;
		
		//--------------------------------------
		//  functions_ 
		//--------------------------------------
		
		private var functions_:Dictionary;
		
		//--------------------------------------
		//  outputRoot_ 
		//--------------------------------------
		
		private var outputRoot_:File;
		
		
		
		//----------------------------------------------------------------------
		//
		//  Methods 
		//
		//----------------------------------------------------------------------
		
		//--------------------------------------
		//  createOutputDirectory 
		//--------------------------------------
		
		private function createOutputDirectory():void {
			outputRoot_ = 
				new File(File.applicationDirectory.nativePath).resolvePath(
					'../out');
			
			if (outputRoot_.exists) {
				outputRoot_.deleteDirectory(true);
			}
			
			outputRoot_.createDirectory();

			File.applicationDirectory.resolvePath('assets/vf2js').copyTo(
				outputRoot_.resolvePath('vf2js')); 
		}
		
		//--------------------------------------
		//  creationCompleteHandler 
		//--------------------------------------
		
		private function creationCompleteHandler(event:FlexEvent):void {
			var clazz:Clazz, 
			    clsAccessor:Accessor, 
				clsConstant:Constant, 
				clsMemberName:MemberType, 
				clsMemberTypeNames:Array,
				clsMemberType:String, 
				clsMemberValue:Object, 
				clsField:Object,
				clsMembers:Dictionary,
				clsType:Type, 
				clsVariable:Variable,
				funczion:Object,
				i:int,
				j:int, 
				key:String, 
				m:int, 
				n:int, 
				p:int, 
				parameter:Parameter,
				parameters:Array,
				parameterNames:Array,
				q:int;
			
				clsMemberTypeNames = [ 
					MemberType.STATIC_CONSTANT,
					MemberType.STATIC_VARIABLE,
					MemberType.STATIC_PROPERTY,
					MemberType.STATIC_METHOD,
					MemberType.CONSTANT,
					MemberType.VARIABLE,
					MemberType.PROPERTY,
					MemberType.METHOD ];
			
			createOutputDirectory();
			
			readCatalogXML();
			
			parseClasses();
			
			// namespace 'classes'
			functions_['mx.core.mx_internal'] = 'mx.core.mx_internal';
			functions_['mx.utils.object_proxy'] = 'mx.utils.object_proxy';
			functions_['flashx.textLayout.tlf_internal'] = 'flashx.textLayout.tlf_internal';
			
			for (key in functions_) {
				clazz = new Clazz(null);
				
				clazz.qName = key;
				
				if (key.split('.').length > 1) {
					clazz.name = clazz.qName.substring(
						clazz.qName.lastIndexOf('.') + 1, clazz.qName.length);
				} else {
					continue;
				}
				
				clazz.startOutput();
				
				writeClassFile(clazz);
			}

			for (key in classes_) {
				clazz = Clazz(classes_[key]);
				
				clsType = clazz.type;
				if (clsType && 
					clsType.fullName && 
					clsType.fullName !== 'Object') {
					
					clsMembers = parseClassMembers(clazz);
					
					if (clazz.qName === 'int') {
						clazz.qName = 'INT';
					}
					clazz.startOutput();
					
					// Member stubs
					for (var count:int = 0, total:int = clsMemberTypeNames.length; count < total; count++) {
						clsMemberName = clsMemberTypeNames[count];
						if (clsMembers[clsMemberName].length > 0) {
							
							clazz.addMajorBlockComment(
								clsMemberName.toString().toUpperCase().replace('_', ' '));
							
							for (j = 0, m = clsMembers[clsMemberName].length; j < m; j++) {
								if (clsMembers[clsMemberName][j] is Constant ||
									clsMembers[clsMemberName][j] is Variable) {
									clsField = clsMembers[clsMemberName][j];
									clsMemberType = 
										Utils.parseType(flash.utils.getQualifiedClassName(
											clsField.type.clazz));
									
									clazz.output += JSDoc.emitJSDoc(
										JSDoc.FIELD,
										clsField.name,
										clsMemberType);
									
									clazz.output += 
										clazz.qName + 
										'.' + 
										((clsField.isStatic) ? '' : 'prototype.') +
										clsField.name;
									
									clsMemberValue = clsField.getValue();
									if (clsMemberValue) {
										clazz.output += ' = ';

										if (clsMemberType === 'Array') {
											clazz.output += '[';
											for (var k:int = 0, l:int = clsMemberValue.length; k < l; k++) {
												if (k > 0) {
													clazz.output += ', ';
												}
												clazz.output += '\'' + clsMemberValue[k] + '\'';
											}
											clazz.output += ']';
										} else {
											clazz.output += 
												((clsMemberType === 'string') ? '\'' : '') +
												clsMemberValue +
												((clsMemberType === 'string') ? '\'' : '');
										}
									}
									
									clazz.output += Clazz.MEMBER_SEPARATOR;
								} else if (clsMembers[clsMemberName][j] is Accessor) {
									clsField = clsMembers[clsMemberName][j];
									clsMemberType = 
										Utils.parseType(flash.utils.getQualifiedClassName(
											clsField.type.clazz));
									
									clazz.output += JSDoc.emitJSDoc(
										JSDoc.METHOD,
										clsField.name,
										'', clsMemberType);
									
									clazz.output += 
										clazz.qName + 
										'.' + 
										((clsField.isStatic) ? '' : 'prototype.') +
										'get_' + clsField.name + ' = ' +
										'function() {\n' +
										'  ' + getImplementation(
											clazz, clsField, 'get_', true) + '\n' +
										'}';

									if (Accessor(clsField).writeable) {
										clazz.output += Clazz.MEMBER_SEPARATOR;
										
										parameter = new Parameter(null, 0);

										clazz.output += JSDoc.emitJSDoc(
											JSDoc.FIELD,
											clsField.name);
										
										clazz.output += 
											clazz.qName + 
											'.' + 
											((clsField.isStatic) ? '' : 'prototype.') +
											'set_' + clsField.name + ' = ' +
											'function(value) {\n' +
											'  ' + getImplementation(
												clazz, clsField, 'set_') + '\n' +
											'}';
									}
									
									/*
									clazz.output += JSDoc.emitJSDoc(
										JSDoc.FIELD,
										clsField.name,
										clsMemberType);
									
									clazz.output += 
										clazz.qName + 
										'.' + 
										((clsField.isStatic) ? '' : 'prototype.') +
										clsField.name +
										';\n\n';
									
									clazz.output += 
										'Object.defineProperty(' + clazz.qName + ((clsField.isStatic) ? '' : '.prototype') + ', \'' + clsField.name + '\', {\n' +
										'  get: function() {\n' +
										'    ' + StringUtil.substitute(ACTION_UNIMPLEMENTED, [clazz.qName + '::' + clsField.name]) + '\n' +
										'  }';
									if (Accessor(clsField).writeable) {
										clazz.output += 
											',\n  set: function(value) {\n' +
											'    ' + StringUtil.substitute(ACTION_UNIMPLEMENTED, [clazz.qName + '::' + clsField.name]) + '\n' +
											'  }';
									}
									clazz.output += 
										'\n})';
									*/
									
									clazz.output += Clazz.MEMBER_SEPARATOR;
								} else if (clsMembers[clsMemberName][j] is Method) {
									clsField = clsMembers[clsMemberName][j];

									parameters = Method(clsField).parameters;
									
									parameterNames = [];
									for (i = 0, n = parameters.length; i < n; i++) {
										parameterNames.push(((parameters[i].isOptional) ? 'opt_' : '') + 'arg' + i);
									}

									var returnType:String = Utils.parseType(Method(clsField).returnType.fullName);
									if (returnType === 'void') {
										returnType = '';
									}
									
									clazz.output += JSDoc.emitJSDoc(
										JSDoc.METHOD, 
										clsField.name, 
										parameters,
									    returnType);
									
									clazz.output += 
										clazz.qName + 
										'.' + 
										((clsField.isStatic) ? '' : 'prototype.') +
										clsField.name +
										' = function(' +
										parameterNames.join(', ') + 
										') {';
										if (!clazz.type.isInterface) {
											clazz.output += '\n  ' + getImplementation(
												clazz, clsField, '', 
												(returnType !== ''),
												parameterNames.join(', ')) + '\n';
										}
										clazz.output += '}';
									
									clazz.output += Clazz.MEMBER_SEPARATOR;
								}
							}
						}
					}
					
					writeClassFile(clazz);
				}
			}
			
			this.exit();
		}
		
		//--------------------------------------
		//  getImplementation
		//--------------------------------------
		
		private function getImplementation(clazz:Clazz, 
										   clsField:Object, 
										   prefix:String = '', 
										   returns:Boolean = false,
										   parameters:String = ''):String {
			var compositeClazzMembers:Array,
				hasImplementation:Boolean = false,
				i:int,
				isStatic:Boolean,
				implementation:String,
				memberName:String;

			if (clazz.compositeClazz) {
				if (clsField is Accessor) {
					memberName = Accessor(clsField).name;
					isStatic = Accessor(clsField).isStatic;
					
					compositeClazzMembers = clazz.compositeClazz.accessors; 
					
					for (i = compositeClazzMembers.length - 1; i > -1; i--) {
						if (compositeClazzMembers[i].name === memberName) {
							hasImplementation = true;
							
							break;
						}
					}
					
					if (hasImplementation) {
						implementation = ((returns) ? 'return ' : '') + 
							((isStatic) ? clazz.compositeClazzName + '.' : 'this.$_implementation.') + 
							prefix + memberName + '();';
					} else {
						implementation = 
							StringUtil.substitute(ACTION_UNIMPLEMENTED, 
								[clazz.qName + '::' + prefix + memberName]);
					}
				} else if (clsField is Method) {
					memberName = Method(clsField).name;
					isStatic = Method(clsField).isStatic;
					
					compositeClazzMembers = clazz.compositeClazz.methods; 
					
					for (i = compositeClazzMembers.length - 1; i > -1; i--) {
						if (compositeClazzMembers[i].name === memberName) {
							hasImplementation = true;
							
							break;
						}
					}
					
					if (hasImplementation) {
						implementation = ((returns) ? 'return ' : '') + 
							((isStatic) ? clazz.compositeClazzName + '.' : 'this.$_implementation.') + 
							memberName + '(' + parameters + ');';
					} else {
						implementation = 
							StringUtil.substitute(ACTION_UNIMPLEMENTED, 
								[clazz.qName + '::' + memberName]);
						
						if (returns) {
							implementation += 
								'\n\n  return null; // placeholder to appease gjslint';
						}
					}
				}
			}
			
			return implementation;
		}
		
		//--------------------------------------
		//  parseClassMembers
		//--------------------------------------
		
		private function parseClassMembers(clazz:Clazz):Dictionary {
			var clsField:Object, 
				clsFieldsArray:Array, 
				clsMembers:Dictionary, 
			    clsMethod:Method, 
				clsMethodsArray:Array, 
				clsType:Type, 
				i:int, 
				n:int;
			
			clsMembers = new Dictionary();
			clsMembers[MemberType.STATIC_CONSTANT] = [];
			clsMembers[MemberType.STATIC_VARIABLE] = [];
			clsMembers[MemberType.STATIC_PROPERTY] = [];
			clsMembers[MemberType.STATIC_METHOD] = [];
			clsMembers[MemberType.CONSTANT] = [];
			clsMembers[MemberType.VARIABLE] = [];
			clsMembers[MemberType.PROPERTY] = [];
			clsMembers[MemberType.METHOD] = [];
			
			clsType = clazz.type;
			
			clsFieldsArray = clsType.fields;
			for (i = 0, n = clsFieldsArray.length; i < n; i++) {
				clsField = clsFieldsArray[i];
				if (clsField.declaringType.name === clsType.name) {
					if (clsField is Constant && clsField.name !== 'length') {
						if (clsField.isStatic) {
							clsMembers[MemberType.STATIC_CONSTANT].push(clsField);
						} else {
							clsMembers[MemberType.CONSTANT].push(clsField);
						}
					} else if (clsField is Variable) {
						if (clsField.isStatic) {
							clsMembers[MemberType.STATIC_VARIABLE].push(clsField);
						} else {
							clsMembers[MemberType.VARIABLE].push(clsField);
						}
					} else if (clsField is Accessor) {
						if (clsField.isStatic) {
							clsMembers[MemberType.STATIC_PROPERTY].push(clsField);
						} else {
							clsMembers[MemberType.PROPERTY].push(clsField);
						}
					}
				}
			}
			
			clsMethodsArray = clsType.methods;
			for (i = 0, n = clsMethodsArray.length; i < n; i++) {
				clsMethod = clsMethodsArray[i];
				if (clsMethod.declaringType.name === clsType.name) {
					if (clsMethod.isStatic) {
						clsMembers[MemberType.STATIC_METHOD].push(clsMethod);
					} else {
						clsMembers[MemberType.METHOD].push(clsMethod);
					}
				}
			}
			
			return clsMembers;
		}
			
		//--------------------------------------
		//  parseClasses
		//--------------------------------------
		
		private function parseClasses():void {
			var addClazz:Function, className:String, classType:Type, 
			clazz:Clazz, exclude:Boolean, excludeFunctionPackageArr:Array, 
			excludeTopLevelClassArr:Array, pkg:String, pkgArr:Array, i:int, 
			interfaceName:String, interfaceNamesArray:Array, interfaceType:Type, 
			isClazz:Function, j:int, jsEquivArr:Array, m:int, n:int, 
			namespaceArray:Array, superClassName:String, 
			superClassNamesArray:Array, superClassType:Type;
			
			addClazz = function (name:String, type:Type):void {
				var result:Clazz;
				
				result = new Clazz(type);
				result.name = type.name;
				result.qName = Utils.cleanClassQName(type.fullName);

				if (excludeTopLevelClassArr.indexOf(name) === -1) {
					classes_[name] = result;
				}
			}
				
			isClazz = function (clazzName:String):Boolean {
				var clazzNameArr:Array, firstCharCode:Number;
				
				clazzNameArr = clazzName.split('.');
				if (clazzNameArr && clazzNameArr.length > 0) {
					clazzName = clazzNameArr[clazzNameArr.length - 1];
				}
				firstCharCode = clazzName.charCodeAt(0);
				
				return firstCharCode >= 65  && firstCharCode <= 90;
			}
				
			// ToDo (erikdebruin): these classes have an JS counterpart, and we
			//                     want to only add those members that are not
			//                     in the JS implementation, or override those
			//                     with a different implementation.
			excludeTopLevelClassArr = [
				'Array', 'Boolean', 'Date',/* 'Error',*/ 'EvalError', 'Function', 
				'JSON', 'Math', 'Number', 'QName', 'RangeError', 
				'ReferenceError', 'RegExp', 'String', 'SyntaxError', 
				'TypeError' ];
			
			excludeFunctionPackageArr = [
				'avmplus', 'avm2.intrinsics.memory', 'bugzilla',
				'flash.debugger', 'flash.media', 'flash.profiler', 
				'flash.sampler', 'watson' ];
			
			jsEquivArr = [
				'decodeURI', 'decodeURIComponent', 'encodeURI', 
				'encodeURIComponent', 'escape', 'isFinite', 
				'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape' ];
			
			classes_ = new Dictionary();

			functions_ = new Dictionary();
			
			for (i = 0, n = catalogXML_.length() - 1; i < n; i++) {
				className = Utils.cleanClassQName(catalogXML_[i].@id);
				try
				{
					if (!classes_[className]) {
						classType = Type.forName(className);
						if (classType && classType.fullName) {
							namespaceArray = className.split('.');
							if (namespaceArray.length === 1 ||
								namespaceArray[0] === 'flash') {
								
								addClazz(className, classType);

								superClassNamesArray = classType.extendsClasses;
								m = superClassNamesArray.length;
								for (j = 0; j < m; j++) {
									superClassName = Utils.cleanClassQName(
										superClassNamesArray[j]);
									if (!classes_[superClassName]) {
										superClassType = Type.forName(
											superClassName);
										if (superClassType) {
											addClazz(superClassName, 
												superClassType);
										}
									}
								}
								
								// fetch class' interfaces
								interfaceNamesArray = classType.interfaces;
								m = interfaceNamesArray.length;
								for (j = 0; j < m; j++) {
									interfaceName = interfaceNamesArray[j];
									if (!classes_[interfaceName]) {
										interfaceType = Type.forName(
											interfaceName);
										if (interfaceType) {
											addClazz(interfaceName, 
												interfaceType);
										}
									}
								}
							}
						} else { // "function Classes"
							pkgArr = className.split('.');
							if (pkgArr.length > 1) {
								pkgArr.pop();
							}
							pkg = pkgArr.join('.');
							
							exclude = pkg.charAt(0) === '_' || 
								excludeFunctionPackageArr.indexOf(pkg) > -1 || 
								jsEquivArr.indexOf(pkg) > -1;
							
							if (!isClazz(className) && !exclude) {
								functions_[className] = className;
							}
						}
					}
				}
				catch (err:Error) { /* eat Type.forName() exceptions */ }
			}
		}
		
		//--------------------------------------
		//  readCatalogXML
		//--------------------------------------
		
		private function readCatalogXML():void {
			var file:File, stream:FileStream, xml:XML;
			
			file = File.applicationDirectory.resolvePath(
				'assets/catalog_15.xml');
			
			stream = new FileStream();
			stream.open(file, FileMode.READ);
			xml = new XML(
				stream.readUTFBytes(stream.bytesAvailable).replace(
					/xmlns=".*"/, ""));
			stream.close();
			
			catalogXML_ = xml..script.children();
		}
		
		//--------------------------------------
		//  writeClassFile
		//--------------------------------------
		
		private function writeClassFile(clazz:Clazz):void {
			var file:File, 
				fileStream:FileStream, 
				clazzQName:String, 
				packagePath:String;
			
			clazzQName = clazz.qName;
			
			packagePath = (clazzQName.indexOf('.') > -1) ? clazzQName : '';
			packagePath = packagePath.substring(0, packagePath.lastIndexOf('.'));
			packagePath = packagePath.replace(/\./g, '/');
			if (packagePath !== '') {
				packagePath = packagePath + '/';
			}
			
			fileStream = new FileStream();
			file = outputRoot_.resolvePath(packagePath + clazz.name + '.js');
			fileStream.open(file, FileMode.WRITE);
			fileStream.writeUTFBytes(clazz.output);
			fileStream.close();
		}
		
	]]></fx:Script>
	
	<fx:Declarations />
	
</s:WindowedApplication>
