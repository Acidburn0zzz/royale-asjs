////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// Jewel Layouts

// Layouts variables
$gaps: 10
$gap-step: 3
$gap: 0px

/* Absolute */
.layout.absolute
	position: absolute
	> *
		position: absolute

.layout
	display: flex
	//position: relative

/* Horizontal */
.layout.horizontal
	flex-flow: row nowrap
	align-items: flex-start
	
	> *
		flex: 1 0 auto

	@for $i from 1 through $gaps
		&.gap-#{$i}x#{$gap-step}px
			> *:first-child
				margin: 0px
			> *
				margin: 0px 0px 0px ($gap + $i * $gap-step)

/* Vertical */	
.layout.vertical
	flex-flow: column nowrap
	align-items: flex-start
	
	> *
		flex: 0 0 auto

	@for $i from 1 through $gaps
		&.gap-#{$i}x#{$gap-step}px
			> *:first-child
				margin: 0px
			> *
				margin: ($gap + $i * $gap-step) 0px 0px

/* Tile */	
.layout.tile
	flex-flow: row wrap
	align-items: flex-start
	
	// this not compile******
	// &.gap
	// 	> *:first-child
	// 		margin: 0px
	// 	> *:nth-child(-n+3)
	// 		margin: 0px 0px 0px $gap-size
	// 	> *:nth-child(3n)
	// 		margin: $gap-size 0px 0px
	// 	> *
	// 		margin: $gap-size 0px 0px $gap-size

.layout.horizontal.space
	justify-content: space-between

/* Grid */
$grid-columns: 12 !default
$gap-size: 10px !default

.layout.grid
	flex-flow: row wrap
	align-items: stretch
	width: 100%
	height: 100%
	
	> *
		flex: 0 0 auto // flex-grow, flex-shrink and flex-basis
		max-width: 100%
		width: 100%
		
	
	@each $size in $size-names
		@media (min-width: map-get($sizes, $size))
			@for $i from 1 through $grid-columns
				@for $j from 1 through $i
					.#{$size}-col-#{$j}-#{$i}
						width: percentage($j / $i)
						
		@if index($size-names, $size) == 1
			@media (max-width: nth(nth($sizes, 2), 2) - 1)
				+visible-classes($size)
		@else if index($size-names, $size) != 1 and index($size-names, $size) < length($sizes)
			@media (min-width: map-get($sizes, $size)) and (max-width: nth(nth($sizes, index($size-names, $size) + 1), 2) - 1)
				+visible-classes($size)
		@else if index($size-names, $size) == length($sizes)
			@media (min-width: nth(nth($sizes, length($sizes)), 2))
				+visible-classes($size)
	&.gap	
		> *
			margin: $gap-size / 2
		@each $size in $size-names
			@media (min-width: map-get($sizes, $size))
				@for $i from 1 through $grid-columns
					@for $j from 1 through $i
						.#{$size}-col-#{$j}-#{$i}
							width: calc(#{percentage($j / $i)} - #{$gap-size})

#{$visible-sizes}
	display: none !important

#{$hidden-sizes}
	display: block !important

#{$hidden-flex-sizes}
	display: flex !important

